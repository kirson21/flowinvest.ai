<analysis>
The AI engineer successfully evolved the Flow Invest application, initially building core MVP features like AI Feed and Trading Bots with FastAPI and Supabase. Subsequent efforts transformed Portfolios into a Marketplace with rich content editing and a review system, enhanced the Advanced Bot Builder with trading presets, and integrated a Reddit-style voting system. Recent work focused on critical UI/UX cleanup (removing featured badges, language options, Railway files) and then a significant feature addition: a comprehensive Super Admin role for managing user portfolios and pre-built bots. This led to several bug fixes related to bot visibility and synchronization. The immediate preceding work involved implementing a Seller Verification System, which introduced file upload and form validation issues, followed by critical data synchronization problems across devices due to missing Supabase tables and flawed migration logic. The engineer is currently debugging these synchronization and data loss issues.
</analysis>

<product_requirements>
Flow Invest is an AI-powered investment platform focusing on minimalist design, scalability, and mobile responsiveness. It offers an AI Feed for news, Trading Bots (pre-built and custom-made inspired by Veles Finance), and a Marketplace (formerly Portfolios). The backend uses FastAPI with Supabase for data and authentication (Email/Password, Google OAuth).

Key features developed include Grok 4 integration for AI bot creation, user-generated content (Patreon-like products with rich content editors), an Airbnb-style review system, enhanced bot editing, and a Seller Mode. Recent advancements added advanced trading settings (leverage, margin type, presets) to the bot builder, a Reddit-style voting system for marketplace products, and a My Purchases section. The application also requires a Super Admin role (User UID: ) with exclusive privileges to manage all user portfolios and pre-built bots, including moving bots between My Bots and Pre-Built Bots. A Seller Verification System is required to restrict seller features (product creation, enable seller mode) to verified users and super admins. This system includes an application form, document uploads, super admin approval/rejection, and a notification system. Data across user devices must be synchronized.
</product_requirements>

<key_technical_concepts>
- **Frontend**: React, , Tailwind CSS, Radix UI, , React Context API, Local Storage, .
- **Backend**: FastAPI, , , .
- **Database/Auth**: Supabase (PostgreSQL), Supabase Auth, Row Level Security (RLS), Supabase Storage.
- **AI/Integration**: OpenAI API (translation), Grok 4 API (bot creation).
- **Deployment**: Render, Vercel, Docker.
</key_technical_concepts>

<code_architecture>
The application uses a full-stack architecture with a React frontend and a FastAPI backend, primarily using Supabase for database operations and authentication.

**Directory Structure:**



**Key Files and Changes Made:**

- : Manages user authentication state.
    - **Changes**: Modified to automatically load a test user in development mode. Integrated  to synchronize user data (bots, purchases, account, votes) to/from Supabase upon user login or changes, with localStorage fallback for development. Includes super admin detection logic for the test user.
- : Central marketplace display.
    - **Changes**:  badge display removed. Enhanced  and  rich content editor logic. My Purchases section added. Implemented access control for Create your product button based on seller verification status (super admin or verified seller). Added  to prompt unverified users. Integrated super admin controls (edit/delete) for all portfolios, with the  icon import.
- : Interface for creating new marketplace products.
    - **Changes**:  property initialization removed. UI fixed for delete and Add more content buttons by adjusting padding/positioning.
- : User profile and application settings.
    - **Changes**:  badge display removed. Language choice UI removed (including  icon import and related state/logic), with a bug fix for a residual  reference. Seller Mode toggle now checks seller verification status, displaying  if unverified. Implemented a notification system (Mail icon) to display application messages (e.g., verification status). Integrated  for account balance synchronization. Added super admin verification management button. Fixed lint errors.
- : Provides mock data.
    - **Changes**:  properties removed from .
- : Trading bot management.
    - **Changes**: Implemented super admin capabilities:  check; functions for moving bots between My Bots and Pre-Built Bots (e.g., , , ); UI controls for these actions in  and . Fixed privacy bug where My Bots showed other users' bots (now filtered by ). Addressed synchronization mismatch for Pre-Built Bots by loading them from Supabase (or localStorage fallback). Integrated  for loading and saving user bots.
- : Handles Supabase Storage interactions.
    - **Changes**: Updated for secure file uploads and deletions for verification documents.
- : (NEW FILE) Handles seller verification logic, including application submission, file uploads to Supabase Storage, status updates, and notifications.
    - **Changes**: Refactored to handle file upload errors (400 status), implement a  fallback for development, and use signed URLs for secure document viewing. Fixed , ,  functions to work with Supabase RLS and  fallback, and to create user notifications.
- : (NEW COMPONENT) Frontend form for seller verification application.
    - **Changes**: Improved address entry to include separate , , ,  fields. Added bottom spacing for buttons. Updated validation and submission logic to handle new address format and file uploads. Includes  fallback for development.
- : (NEW COMPONENT) Modal displayed to unverified users attempting to access seller features.
- : (NEW COMPONENT) Super admin panel for managing seller verification applications.
    - **Changes**: Updated to use signed URLs for secure document viewing. Added debugging logs.
- : (NEW FILE) Manages synchronization of user data (bots, purchases, account, votes) between localStorage and Supabase.
    - **Changes**: Includes functions for , , , , etc.
- : (NEW FILE) Backend routes for handling seller verification applications and document storage.
- : Main FastAPI server.
    - **Changes**: Added  to include new seller verification API endpoints.
- : (NEW FILE) SQL schema for  table.
- : (NEW FILE) SQL policies for the  Supabase storage bucket.
- : (NEW FILE) SQL schema for , , ,  tables in Supabase.
- : (NEW FILE) Clean version of  without markdown.
- , , , , , , , : **All DELETED** as they were unnecessary Railway-related files.
</code_architecture>

<pending_tasks>
- Supabase RLS Finalization (for backend bot management - partially addressed by data sync policies).
- n8n Webhook URL Update (manual update required).
- Frontend Deployment on Vercel (after latest changes).
- Run  (to enable profile updates).
- OpenAI API Key for Render Backend (ensure correct environment variable).
- URL Validation for social links in Seller Mode settings.
- Backend Integration for Seller Data/Reviews (move from  to Supabase).
- Enhance View All Products in SellerProfileModal to fetch real data from Supabase.
</pending_tasks>

<current_work>
Immediately before this summary request, the AI engineer was addressing a series of critical bugs related to the newly implemented Super Admin role and the Cross-Device Data Synchronization system.

**Context of the Issue:**
After successfully implementing the super admin role, the seller verification system, and the initial cross-device data synchronization logic, the user reported significant issues:
1.  **Bots Disappeared**: On the desktop version, user's bots vanished.
2.  **Bot Movement Failure**: Moving bots between Pre-built Bots and My Bots resulted in them disappearing from both sections.
3.  **Mobile Sign-in Stuck**: On a mobile device, the sign-in process hung indefinitely (Completing sign in...).
4.  **Data Synchronization Failure**: User confirmed that data (bots, purchases, account balance) was not synchronizing across devices, despite the data sync service being implemented.

**AI Engineer's Investigation and Actions:**
The AI engineer identified that the primary cause of the synchronization issues was the **missing Supabase tables** (, , , ) that the  was designed to interact with. Consequently, the application was falling back to , which is device-specific, explaining the synchronization failures and data inconsistencies.

To fix this, the engineer:
1.  Created  (later refined to  due to user's SQL editor syntax error) to define the necessary Supabase tables and their RLS policies.
2.  Created  to handle data migration from  to Supabase and manage data synchronization.
3.  Updated  to trigger the data synchronization process upon user login and changes.
4.  Modified  to use the new  for loading and saving user bots.

The user then reported that even after running the new SQL, the bots were still disappearing, and mobile sign-in was stuck, indicating new bugs introduced or existing ones not fully resolved, specifically within the migration function and bot movement logic within the .

**Current State:**
The application has the necessary database schemas for cross-device sync and seller verification policies in place (manual application of policies was provided). The frontend components are wired to use these services. However, there are still active bugs where data is being lost or not properly migrated/synchronized, and mobile login is failing. The engineer is actively debugging the 's migration and bot movement functions.
</current_work>

<optional_next_step>
Fix the data migration and bot movement logic within  to prevent data loss and ensure proper synchronization across devices.
</optional_next_step>
